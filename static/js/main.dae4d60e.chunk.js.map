{"version":3,"sources":["movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","id","title","year","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUA6BeA,MAzBf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OAAO,sBAAKC,UAAU,QAAf,UACH,qBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,oBAAIK,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,SAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SACKI,GADIC,QAKjB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAE,KAA/C,aC8COC,E,4MA9CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAOAC,IAAMC,IAAI,yEAPV,gBAIJJ,EAJI,EAERK,KACEA,KACEL,OAIN,EAAKM,SAAU,CAACN,SAAQD,WAAW,IARzB,2C,kEAWVQ,KAAKN,c,+BAEE,IAAD,EACuBM,KAAKT,MAA1BC,EADF,EACEA,UAAWC,EADb,EACaA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,8BACE,sBAAMT,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAe,GACV,OAAO,cAAC,EAAD,CAEPxB,GAAIwB,EAAMxB,GACVE,KAAMsB,EAAMtB,KACZD,MAAOuB,EAAMvB,MACbE,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,QANTmB,EAAMxB,e,GAhCP0B,IAAMC,WCHTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAE1Bb,M","file":"static/js/main.dae4d60e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./movie.css\"\r\n\r\nfunction Movie({id, title, year, summary, poster, genres}){\r\n    return <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title}/>\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">\r\n            {genres.map((genre, index) => (\r\n                <li key={index} className=\"genres__genre\">\r\n                    {genre}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0,180)}...</p>\r\n    </div>\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    summary:PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","\nimport './App.css';\nimport React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./movie\"\n\n// * 생명주기 - Mounting, Updating, UnMounting\n// * Mounting - 생성될 때(페이지가 보여질 때 호출)\n// * constructor -> render -> componentDidMount 순서대로 호출됨.\n\n// * Updating - 페이지에서 setState를 호출할 떄\n// * render -> componentDidUpdate 순서대로 호출됨\n\n// * UnMounting - 페이지에서 떠날 때 호출됨\n// * componentWillUnMount 호출\nclass App extends React.Component{\n  state = {\n    isLoading: true,\n    movies: []\n  }\n  // * state에 변화를 줘서 class의 state를 변경시키도록 강제함.\n  // * setState를 호출하면 새로운 state와 render함수가 갱신되는데, 리액트는 충분히 똑똑해서 변화된 부분만 감지하여 적용함(매우 빠른 반응)\n  getMovies = async () => { // * async - await을 통해 비동기 처리 가능하다.(await가 끝날때까지 비동기로 기다림)\n    const {\n      data: {\n        data: {\n          movies\n        }\n      }\n    } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\");\n    this.setState( {movies, isLoading: false} );\n  }\n  componentDidMount(){\n    this.getMovies();\n  }\n  render(){\n    const { isLoading, movies} = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div>\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => {\n              return <Movie \n              key={movie.id} \n              id={movie.id} \n              year={movie.year} \n              title={movie.title} \n              summary={movie.summary} \n              poster={movie.medium_cover_image}\n              genres={movie.genres} />\n            })}\n          </div>\n        )}\n      </section>\n    )\n  }\n}\n\nexport default App;\n\n\n\n// function Food({name, image, rating}){\n//   return (\n//     <div>\n//       <h1>I like {name}</h1>\n//       <h4>{rating} / 5.0</h4>\n//       <img src= {image} alt={name}></img> {/*** alt는 시각장애인을 위한 것 */}\n//     </div>\n//   )\n// }\n\n// // ! 반드시 이름은 propTypes로 해야 리액트가 확인 가능하다\n// // * https://ko.reactjs.org/docs/typechecking-with-proptypes.html 참고\n// Food.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   image: PropTypes.string.isRequired,\n//   rating: PropTypes.number.isRequired\n// }\n\n// const foodILike = [\n//   {\n//     id: 1,\n//     food: \"김치\",\n//     image: \"https://images.unsplash.com/photo-1482049016688-2d3e1b311543?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\",\n//     rating: 4.3\n//   },\n//   {\n//     id: 2,\n//     food: \"비빔밥\",\n//     image: \"https://images.unsplash.com/photo-1482049016688-2d3e1b311543?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\",\n//     rating: 4.0\n//   },\n//   {\n//     id: 3,\n//     food: \"삼겹살\",\n//     image: \"https://images.unsplash.com/photo-1482049016688-2d3e1b311543?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\",\n//     rating: 4.9\n//   },\n//   {\n//     id: 4,\n//     food: \"볶음밥\",\n//     image: \"https://images.unsplash.com/photo-1482049016688-2d3e1b311543?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\",\n//     rating: 4.7\n//   }\n// ];\n\n// function renderFood(dish){\n//   return <Food key={dish.id} name={dish.food} image = {dish.image} rating ={dish.rating}/>\n// }\n\n// function App() {\n//   return (\n//     // 컴포넌트 : HTML을 반환하는 함수\n//     // 리액트는 component를 사용해서 HTML처럼 작성하려는 경우에 필요하다.\n//     // jsx : javascript와 html의 혼종(리액트만의 개념)\n//     // npm i prop-types : 내가 원하는 property를 전달받았는지 확인해주는 것\n//     // package.json 에서 \"prop-types\" 설치되었는지 확인.\n//     <div>\n//       <h1>Hello</h1>\n//       {foodILike.map(renderFood)}\n//       {/** 재사용 가능하게 만들어준다.(클래스 느낌)*/}\n//     </div>\n//   );\n// }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Potato from './Potato'\n// ! React Application는 하나의 Component만을 Rendering 해야하기 때문에 다른 컴포넌트 포함 불가. -> App.js 안에 포함시켜야 함\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}